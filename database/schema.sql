-- Database: tuannvq_portfolio
-- Description: Portfolio database schema for Tuan Nguyen

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create tables

-- Messages table for contact form submissions
CREATE TABLE messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR DEFAULT '',
    email VARCHAR DEFAULT '',
    image VARCHAR,
    message VARCHAR DEFAULT '',
    reply_to VARCHAR,
    is_show BOOLEAN DEFAULT true,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    is_reply BOOLEAN DEFAULT false
);

-- Projects table for portfolio projects
CREATE TABLE projects (
    id INT PRIMARY KEY,
    title VARCHAR NOT NULL,
    slug VARCHAR NOT NULL,
    description VARCHAR NOT NULL,
    image VARCHAR NOT NULL,
    link_demo VARCHAR,
    link_github VARCHAR,
    stacks VARCHAR[] NOT NULL,
    content VARCHAR,
    is_show BOOLEAN NOT NULL DEFAULT true,
    is_featured BOOLEAN NOT NULL DEFAULT false
);

-- Achievements table for certifications and achievements
CREATE TABLE achievements (
    id INT PRIMARY KEY,
    credential_id VARCHAR,
    slug VARCHAR,
    name VARCHAR NOT NULL,
    issuing_organization VARCHAR NOT NULL,
    category VARCHAR,
    url_credential VARCHAR NOT NULL,
    issue_date VARCHAR NOT NULL,
    expiration_date VARCHAR,
    image VARCHAR NOT NULL,
    is_show BOOLEAN DEFAULT true
);

-- Create indexes for better performance
CREATE INDEX idx_messages_created_at ON messages(created_at);
CREATE INDEX idx_messages_is_show ON messages(is_show);
CREATE INDEX idx_messages_is_reply ON messages(is_reply);
CREATE INDEX idx_projects_slug ON projects(slug);
CREATE INDEX idx_projects_is_show ON projects(is_show);
CREATE INDEX idx_projects_is_featured ON projects(is_featured);
CREATE INDEX idx_projects_stacks ON projects USING GIN(stacks);
CREATE INDEX idx_achievements_category ON achievements(category);
CREATE INDEX idx_achievements_is_show ON achievements(is_show);
CREATE INDEX idx_achievements_issuing_organization ON achievements(issuing_organization);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql'; 